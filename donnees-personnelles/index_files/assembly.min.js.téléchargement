var _____WB$wombat$assign$function_____ = function(name) {return (self._wb_wombat && self._wb_wombat.local_init && self._wb_wombat.local_init(name)) || self[name]; };
if (!self.__WB_pmw) { self.__WB_pmw = function(obj) { this.__WB_source = obj; return this; } }
{
  let window = _____WB$wombat$assign$function_____("window");
  let self = _____WB$wombat$assign$function_____("self");
  let document = _____WB$wombat$assign$function_____("document");
  let location = _____WB$wombat$assign$function_____("location");
  let top = _____WB$wombat$assign$function_____("top");
  let parent = _____WB$wombat$assign$function_____("parent");
  let frames = _____WB$wombat$assign$function_____("frames");
  let opener = _____WB$wombat$assign$function_____("opener");

(function (d) {
    var DYDU_SCRIPT_ID = 'dyduchatbox';
    var SCRIPT_NAME = '';


    function isDefined(value){return typeof value !== 'undefined';}

    /**
     * An URI datatype.  Based upon examples in RFC3986.
     *
     * TODO %-escaping
     * TODO split apart authority
     * TODO split apart query_string (on demand, anyway)
     *
     * @(#) $Id$
     */

// Constructor for the URI object.  Parse a string into its components.
    function dyduURI(str) {
        str = !str ? "" : str;
        // Based on the regex in RFC2396 Appendix B.
        var parser = /^(?:([^:\/?\#]+):)?(?:\/\/([^\/?\#]*))?([^?\#]*)(?:\?([^\#]*))?(?:\#(.*))?/;
        var result = str.match(parser);
        this.scheme = result[1] || null;
        this.authority = result[2] || null;
        this.path = result[3] || null;
        this.query = result[4] || null;
        this.fragment = result[5] || null;
    }

// Restore the URI to it's stringy glory.
    dyduURI.prototype.toString = function () {
        var str = "";
        if (this.scheme) {
            str += this.scheme + ":";
        }
        if (this.authority) {
            str += "//" + this.authority;
        }
        if (this.path) {
            str += this.path;
        }
        if (this.query) {
            str += "?" + this.query;
        }
        if (this.fragment) {
            str += "#" + this.fragment;
        }
        return str;
    };

// Introduce a new scope to define some private helper functions.
    (function () {
        // RFC3986 ยง5.2.3 (Merge Paths)
        function merge(base, rel_path) {
            var dirname = /^(.*)\//;
            if (base.authority && !base.path) {
                return "/" + rel_path;
            }
            else {
                return base.path.match(dirname)[0] + rel_path;
            }
        }

        // Match two path segments, where the second is ".." and the first must
        // not be "..".
        var DoubleDot = /\/((?!\.\.\/)[^\/]*)\/\.\.\//;

        function removeDotSegments(path) {
            if (!path) {
                return "";
            }
            // Remove any single dots
            var newpath = path.replace(/\/\.\//g, '/');
            // Remove any trailing single dots.
            newpath = newpath.replace(/\/\.$/, '/');
            // Remove any double dots and the path previous.  NB: We can't use
            // the "g", modifier because we are changing the string that we're
            // matching over.
            while (newpath.match(DoubleDot)) {
                newpath = newpath.replace(DoubleDot, '/');
            }
            // Remove any trailing double dots.
            newpath = newpath.replace(/\/([^\/]*)\/\.\.$/, '/');
            // If there are any remaining double dot bits, then they're wrong
            // and must be nuked.  Again, we can't use the g modifier.
            while (newpath.match(/\/\.\.\//)) {
                newpath = newpath.replace(/\/\.\.\//, '/');
            }
            return newpath;
        }

        dyduURI.prototype.resolve = function (base) {
            // RFC3986 ยง5.2.2. Transform References;
            var target = new dyduURI();
            if (this.scheme) {
                target.scheme = this.scheme;
                target.authority = this.authority;
                target.path = removeDotSegments(this.path);
                target.query = this.query;
            }
            else {
                if (this.authority) {
                    target.authority = this.authority;
                    target.path = removeDotSegments(this.path);
                    target.query = this.query;
                }
                else {
                    if (!this.path) {
                        target.path = base.path;
                        if (this.query) {
                            target.query = this.query;
                        }
                        else {
                            target.query = base.query;
                        }
                    }
                    else {
                        if (this.path.charAt(0) === '/') {
                            target.path = removeDotSegments(this.path);
                        } else {
                            target.path = merge(base, this.path);
                            target.path = removeDotSegments(target.path);
                        }
                        target.query = this.query;
                    }
                    target.authority = base.authority;
                }
                target.scheme = base.scheme;
            }
            target.fragment = this.fragment;
            return target;
        };
    })();

    var scripts = document.getElementsByTagName('script');
    var callback = '';
    for (var i = 0; i < scripts.length; i++) {
        if (scripts[i].src.indexOf(SCRIPT_NAME) > 0) {
            var params = /\?([^\/]*)$/.exec(scripts[i].src);
            if (params && params[1]) {
                callback = params[1];
            }
            break;
        }
    }


    function getScriptUrl(scriptElement) {
        var myScriptSrc = scriptElement.getAttribute('src');
        var resolvedURI = new dyduURI(myScriptSrc).resolve(new dyduURI(window.location.href)).toString();
        resolvedURI = resolvedURI.substring(0, resolvedURI.lastIndexOf('/') + 1);
        return resolvedURI;
    }

    function getJsBaseUrl($log) {
        if (DYDU_SCRIPT_ID !== '') {
            try {
                var myScript = document.getElementById(DYDU_SCRIPT_ID);
                if (myScript == null && isDefined($log)) {
                    $log.error("The chatbox isn't included with id='" + DYDU_SCRIPT_ID + "' for url=" + window.location.href);
                    return '';
                }
                return getScriptUrl(myScript);

            } catch (eee) {
                if (isDefined($log)) {
                    $log.error('Error in dydu_getJsBaseUrl' + eee);
                }
                return "";
            }
        } else if (SCRIPT_NAME !== '') {
            var scripts = document.getElementsByTagName('script');
            for (var i = 0; i < scripts.length; i++) {
                if (scripts[i].src.indexOf(SCRIPT_NAME) > 0) {
                    return getScriptUrl(scripts[i]);
                }
            }
            return "";
        } else {
            $log.error('Impossible to get script')
        }
    }

    if(callback === ''){
        var script = d.createElement('script');
        script.type = 'text/javascript';
        script.async = true;
        // script.onload = function(){
        //     if(console && console.log){
        //         console.log('[Loaded] '+getJsBaseUrl()+'deployments/20200907105807127/assembly.min.js')
        //     }
        // };
        script.src = getJsBaseUrl()+'deployments/20200907105807127/assembly.min.js';
        if(d.getElementsByTagName('head').length > 0){
            d.getElementsByTagName('head')[0].appendChild(script);
        }else{
            d.getElementsByTagName('body')[0].appendChild(script);
        }
    }else{
        var xmlHttp = new XMLHttpRequest();
        xmlHttp.open( "GET", getJsBaseUrl() + 'deployments/20200907105807127/assembly.min.js', false );
        xmlHttp.send( null );
        eval(xmlHttp.responseText);
    }

}(document));


}
/*
     FILE ARCHIVED ON 14:13:38 Jul 03, 2021 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 09:41:08 Jul 08, 2021.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
*/
/*
playback timings (ms):
  captures_list: 357.983
  exclusion.robots: 0.101
  exclusion.robots.policy: 0.092
  RedisCDXSource: 1.994
  esindex: 0.009
  LoadShardBlock: 305.107 (3)
  PetaboxLoader3.datanode: 168.165 (4)
  CDXLines.iter: 47.474 (3)
  load_resource: 170.215
  PetaboxLoader3.resolve: 146.799
*/